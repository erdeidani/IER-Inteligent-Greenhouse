import jason.asSyntax.ASSyntax;import jason.asSyntax.Literal;import jason.asSyntax.Structure;import jason.environment.Environment;import java.util.Random;public class Example extends Environment {	Literal c = Literal.parseLiteral("cold");	Literal h = Literal.parseLiteral("hot");	Literal g = Literal.parseLiteral("good");	Literal t, w;	int temp, water;		Random rand = new Random();	@Override	public void init(String[] args) {		super.init(args);		addPercept(h); // initial perception: hot				temp = rand.nextInt(-5, 10);		water = rand.nextInt(0 , 10);		updatePercepts();	}	@Override	public boolean executeAction(String agName, Structure action) {				if (action.getFunctor().equals("increase")) {			temp++;		}		if (action.getFunctor().equals("decrease")) {			temp--;		}		if (action.getFunctor().equals("restart")) {			temp = rand.nextInt(-5, 10);		}		updatePercepts();			        informAgsEnvironmentChanged();		return true;	}	private void updatePercepts() {				clearPercepts();		if(temp > 4 ) {			clearPercepts();			addPercept(h);		}		else if(temp < 2 ) {			clearPercepts();			//csak így működött konzistensen a példa ha itt volt			addPercept(c);		}		else {			clearPercepts();			addPercept(g);		}				removePercept("temp", t);		t = ASSyntax.createLiteral("temp",ASSyntax.createNumber(temp));		addPercept(t);				removePercept("water", w);		w = ASSyntax.createLiteral("water",ASSyntax.createNumber(water));		addPercept(w);			}}