import jason.asSyntax.ASSyntax;import jason.asSyntax.Literal;import jason.asSyntax.Structure;import jason.environment.Environment;import java.util.Random;public class Example extends Environment {		int temp, water, humidity, isOpen;	TimeThread time;	Frontend fronted;	@Override	public void init(String[] args) {		super.init(args);				temp = 18;		water = 2;		humidity = 45;				//start time		fronted = new Frontend();		time = new TimeThread(fronted);		TimeThread.humidity = humidity;		TimeThread.water = water;		TimeThread.temperature = temp;		TimeThread.open = false;				time.start();			updatePercepts();	}{}	@Override	public boolean executeAction(String agName, Structure action) {				if (action.getFunctor().equals("increase")) {			time.increaseTemp();		}		if (action.getFunctor().equals("water")) {			time.increaseWater();		}		if (action.getFunctor().equals("open")) {			TimeThread.open = true;		}		if (action.getFunctor().equals("close")) {			TimeThread.open = false;		}				updatePercepts();			        informAgsEnvironmentChanged();		return true;	}	private void updatePercepts() {		temp = TimeThread.temperature;		water = TimeThread.water;		humidity = TimeThread.humidity;		isOpen = getValue(TimeThread.open);					clearPercepts();				Literal percept = ASSyntax.createLiteral("data", 									ASSyntax.createNumber(temp),									ASSyntax.createNumber(water),									ASSyntax.createNumber(humidity));				Literal openPercept = ASSyntax.createLiteral("open", ASSyntax.createAtom(String.valueOf(TimeThread.open)));				addPercept(percept);		addPercept(openPercept);		}	private int getValue(boolean open) {		if(open) { 			return 1;		}		return 0;	}}
